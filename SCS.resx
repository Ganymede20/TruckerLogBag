<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAE+vTABQrksTUK9LbVCvTMZQr0zxUK9M/FCvTOdQr0ytUK9MSU+v
        SwZPr0sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQr0sAUK9MJ1CvTK9Qr0z5UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0zsUK9MgE+vTAxPr0sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUK9MAFCvTBpQr0y7UK9M/1CvTP9Pr0v/Tq5K/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z6UK9Mf1CuSwQAAAAAAAAAAAAAAAAAAAAAAAAAAE9HNwBPRzcrT0c3nE9H
        N6hPRzeBT0c3DE9HNwAAAAAAAAAAAAAAAAAAAAAAAAAAAE+uSgBLrEIBUK9MglCvTP9Qr0z/T69L/1mz
        Vf92wHL/U7BP/1CvTP9Qr0z/UK9M/1CvTP9Qr0zqUK9MSQAAAAAAAAAAAAAAAAAAAAAAAAAAT0c2AE9H
        NllPRzb/T0c2/09HNuFPRzUdT0c1AAAAAAAAAAAAAAAAAAAAAAAAAAAAUK9MAFCvTBxQr0zWUK9M/0+v
        S/9XslT/sduv//D48P+Vz5P/Ua9N/1CvTP9Qr0z/UK9M/1CvTP9Qr0ysAAAAAAAAAAAAAAAAAAAAAAAA
        AABLSEcAS0hKW0pJTf9KSU7/SUlR5TdPoTcfWP8cIlf/HSJX/x0iV/8dIlf/HSJX/x0cSv8aRZt0WFCv
        TPVPr0v/WLNU/7Lcsf/p9ej/wuPB/+z26/+Wz5P/Ua9N/1CvTP9Qr0z/UK9M/1CvTOYAAAAAAAAAAAAA
        AAAAAAAAIVf+ABxY/wgmVeueKFXm/ydV6P8nVer8I1f85SJX/+EiV//iIlf/4iJX/+IiV//iIlf/4iFV
        /+EzeL3rUK9N/0+uS/9kuGH/yebH/4rJh/9UsVD/pNWi/+337f+Wz5P/Ua9N/1CvTP9Qr0z/UK9M/AAA
        AAAAAAAAAAAAAAAAAAAiV/8AIlf/HCJX/98iV///Ilf//yFX//8sU9L/Pkx+/z5Mfv8+TH7/Pkx+/z5M
        fv8+TH7/Pkp//0RqbP9QrUz/UK9M/1CvTP9atFf/Ua9N/0+vS/9UsVD/pNWi/+337f+Wz5P/UrBO/1Cv
        TP9Qr0zxAAAAAAAAAAAAAAAAAAAAACJX/wAiV/8dIVb/4iFW//8hVv//IFb//zhWu/9fVT7/X1U+/19V
        Pv9fVT7/X1U+/19VPv9fVD7/XmVC/1OnTP9QsEz/UK9M/0+vS/9Qr0z/UK9M/0+vS/9UsVD/pNai/+z2
        6/+Cxn//Tq5K/1CvTMUAAAAAAAAAAAAAAAAAAAAAIlf/ABpR/x0zZP/ijqn//46p//8vYv//Pl3C/3Vq
        Uf91alH/dWpR/3VqUf91alH/dWpR/3VpUf90a1D/XJVN/1CwTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/0+v
        S/9VsVH/jcuK/2m6Zv9Pr0v4UK9MbQAAAAAAAAAAAAAAAAAAAAAiV/8AA0D/HWyP/+L4+v//+fv//2KI
        //8wULr/VEs6/1RLOv9USzr/VEs6/1RLOv9USzr/VEs6/1RKOv9SYD3/UKNJ/1CwTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Orkr/T69L/1CvTK9Qr0wTAAAAAAAAAAAAAAAAAAAAACJX/wASS/8dR3P/4sXT
        ///H1P//QnD//zpZv/9rYUr/a2FK/2thSv9rYUr/a2FK/2thSv9rYUr/a2FK/2xhSv9nf0//U6dR/1Cw
        Sv9QsEv/UK9M/1CvTP9Qr0z/UK9M/1CvTP5Qr0y8UK5MJ1CvTAAAAAAAAAAAAAAAAAAAAAAAIlf/ACJX
        /xwhV//fMGL//zFi//8gV///PFq//2xhSf9sYUn/bGFJ/2xhSf9sYUn/bGFJ/2xhSf9sYUn/bGFJ/2tg
        Sf9EbZr/P5CO/0umXv9PrlH/UK9O/1CvTPVQr0zXUK9MglCvTBtQr0wAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAiV/4AIl3/ByFR+J0gT/b/IVL6/yFX//8wUsH/SklO/0pJTv9KSU7/SklO/0pJTv9KSU7/SklO/0pJ
        Tv9KSU7/SklO/zBRwf8iWf3/KWHc/y9qv/85fp6sULBMRFCuTBxQrUoCUK5LAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAcIb0AHSK+Wx0ivv8fNdb/Ilf//yRX9/8nVun/J1bp/ydW6f8nVun/J1bp/ydW
        6f8nVun/J1bp/ydW6f8nVun/JFf3/yJX//8eNNf/HCDB/xsfwlscIMAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAE5FNQBORTUDT0c2WE9HNqRHQErIPjhe/zRDmf8iV///IFL1/x5Q8f8eUPH/HlDx/x5Q
        8f8eUPH/HlDx/x5Q8f8eUPH/HlDx/x5Q8f8gUvX/Ilf//zRDmf8+OF7/R0BKyE9HNqRPRzdXTUc3A05H
        NwAAAAAAAAAAAAAAAAAAAAAAT0Y2AE9GNhhPRzfXUEc1yEdASsY/OF//NESa/yBS9f8MK57/ByGI/wch
        if8HIYn/ByGJ/wchif8HIYn/ByGJ/wchif8HIYn/ByGI/wwrnv8gUvX/NESa/z84X/9HQErGUEc1yE9H
        N9ZPRzcYT0c3AAAAAAAAAAAAAAAAAAAAAAA0Ua8AJ1XpYTBSv/crVdidHCLCZBwbtf4eMdH/HlDv/wch
        iP8EGXj/BBp5/wQaef8EGnn/BBp5/wQaef8EGnn/BBp5/wQaef8EGXj/ByGI/x5Q7/8eMdH/HBu1/hwi
        wmQrVdidMFK+9ydV6WE0UK8AAAAAAAAAAAAAAAAAAAAAAAF0/wAiV/+lIVf//yJY/9wdKsl3HBq1/R4x
        0f8fUPD/ByGJ/wQaef8EGnr/BBp6/wQaev8EGnr/BBp6/wQaev8EGnr/BBp6/wQaef8HIYn/H1Dw/x4x
        0f8cGrX9HSrJdyJY/9whV///Ilf/pQJx/wAAAAAAAAAAAAAAAAAAAAAAAAD/ACJX/6UiV///Ilj/3R0r
        yXccGrX9HjHR/x9Q8P8HIYn/BBp5/wQaev8EGnr/BBp6/wQaev8EGnr/BBp6/wQaev8EGnr/BBp5/wch
        if8fUPD/HjHR/xwatf0dK8l3Ilj/3SJX//8iV/+lAAD+AAAAAAAAAAAAAAAAAAAAAAAAAP8AIlf/pSJX
        //8iWP/dHSvJdxwatf0eMdH/H1Dw/wchif8EGnn/BBp6/wQaev8EGnr/BBp6/wQaev8EGnr/BBp6/wQa
        ev8EGnn/ByGJ/x9Q8P8eMdH/HBq1/R0ryXciWP/dIlf//yJX/6UAAP4AAAAAAAAAAAAAAAAAAAAAADBk
        /wAiV/+lIlf//yJY/9wdKsl3HBq1/R4x0f8fUPD/ByCI/wMYdv8DGXj/Axl4/wMZeP8DGXj/Axl4/wMZ
        eP8DGXj/Axl4/wMYdv8HIIj/H1Dw/x4x0f8cGrX9HSrJdyJY/9wiV///Ilf/pS5l/wAAAAAAAAAAAAAA
        AAAAAAAAI1j/ACJX/1ciV/+oIln/fR0jv2YcG7X+HjDQ/yFU+P8TOLz/Di+o/w8wqf8PMKn/DzCp/w8w
        qf8PMKn/DzCp/w8wqf8PMKn/Di+o/xM4vP8hVPj/HjDQ/xwbtf4dI79mIln/fSJX/6giV/9XIlj/AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcHLcAHBy3Whwctv8dJcL/IEjs/yFR9/8hUPf/IVD3/yFQ
        9/8hUPf/IVD3/yFQ9/8hUPf/IVD3/yFQ9/8hUPf/IVH3/yBI7P8dJcL/HBy2/xwct1ocHLcAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwctwAcHLdaHBy3/xwct/8cILz/HSO//x0j
        v/8dI7//HSO//x0jv/8dI7//HSO//x0jv/8dI7//HSO//x0jv/8dI7//HCC8/xwct/8cHLf/HBy3Whwc
        twAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBy3ABwct1ocHLf/HBy3/xwc
        t/8cHLb/HBy2/xwctv8cHLb/HBy2/xwctv8cHLb/HBy2/xwctv8cHLb/HBy2/xwctv8cHLf/HBy3/xwc
        t/8cHLdaHBy3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcHLcAHBy3Uxwc
        t/scHLf/HBy3/xwct/8cHLf/HBy3/xwct/8cHLf/HBy3/xwct/8cHLf/HBy3/xwct/8cHLf/HBy3/xwc
        t/8cHLf/HBy3+xwct1McHLcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsb
        twAbG7cUHBy3Uxwct1ocHLdaHBy3Whwct1ocHLdaHBy3Whwct1ocHLdaHBy3Whwct1ocHLdaHBy3Whwc
        t1ocHLdaHBy3Whwct1ocHLdTGxu2FBsbtwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///4A///8AH//+AA/B/AAPwfwAD8AAAA+AAAAPgAAAD4AAAA+AAAAPgA
        AAD4AAAB+AAAA/gAAAf8AAA/4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAf8AAA//AAAP/wA
        AD/8AAA//AAAP/////////////////////8=
</value>
  </data>
</root>